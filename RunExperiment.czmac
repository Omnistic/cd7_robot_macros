<?xml version="1.0" encoding="utf-8"?>
<Script>
  <Context>Zen26</Context>
  <Version>1.0</Version>
  <Language>Python</Language>
  <Text>from sample_functions import get_barcode, get_timestamp
from cd7_functions import set_magnification

clr.AddReferenceByPartialName('Zeiss.Micro.AMP')
from Zeiss.Micro.AMP.Scripting import LiveScanScriptingPlugin

ZenLiveScan = LiveScanScriptingPlugin.Instance

experimentName = 'SpiroC_Robot_Testing'
plateType = 'Aceto96.czsht'
additionalParameter = ''

dataPath = 'D:/UserData/Transfer/'

screening_experiments = ['SpiroC_Robot', 'SpiroC_Robot_Testing']
testing_index = 1
actual_experiments = ['SpiroC_V010_Robot', 'MS-PlateOverview-003']

# Is the macro executed by the robot?
try:
    experimentName = sys.argv[1]
    plateType = sys.argv[2]
    additionalParameter = sys.argv[3]

    robot_execution = True
except:
    # In manual execution, load the sample.
    ZenLiveScan.LoadTrayAndPrescan()

    robot_execution = False

# From Zeiss boilerplate template (?).
if experimentName == '':
    print 'Experiment name cannot be empty'
# Screening experiment.
elif experimentName in screening_experiments:
    testing = False
    if experimentName == screening_experiments[testing_index]:
        testing = True

    # A timestamp is also found in the metadata. However, a single
    # timestamp is wanted for both experiments in a run as they
    # should be identified as belonging to the same run.
    timestamp = get_timestamp()

    # =============== Main experiment =============== #
    if not set_magnification(Zen, '5x0.35NA', optovar='2x'):
        print('Warning: magnification not changed.')

    experimentName = actual_experiments[0]
    if testing:
        experimentName += '-Truncated'

    exp = Zen.Acquisition.Experiments.GetByName(experimentName)
    PlateScan = Zen.Acquisition.Execute(exp)

    barcode = get_barcode(PlateScan)

    PlateScan.Save(dataPath + barcode + '-unprocessed-' + timestamp + '.czi')
    PlateScan.Close()

    # Start tracking of saved files for transfer to image analysis server.
    with open(dataPath + 'start', 'w') as file:
        pass

    # =============== Plate overview =============== #
    if not set_magnification(Zen, '5x0.35NA', optovar='1x'):
        print('Warning: magnification not changed.')

    experimentName = actual_experiments[1]
    if testing:
        experimentName += '-Truncated'

    exp = Zen.Acquisition.Experiments.GetByName(experimentName)
    PlateOverview = Zen.Acquisition.Execute(exp)

    PlateOverview.Save(dataPath + barcode + '-PO-unprocessed-' + timestamp + '.czi')
    PlateOverview.Close()

    # Restart tracking in case previous one timed-out
    with open(dataPath + 'start', 'w') as file:
        pass
        
    # From PAA: Whatever is printed gets picked up by the robot.
    retstring = ZenLiveScan.GetCurrentError()
    if retstring=='Successful':
        print('Experiment Completed: {}'.format(experimentName))

    # In manual exection, eject the sample.
    if not robot_execution:
        ZenLiveScan.EjectTray()
# From Zeiss boilerplate template (?).
else:
    experiment = ZenExperiment()
    experiment.Load(experimentName, ZenSettingDirectory.User)
    experiment.SetActive()
    outputexperiment1 = Zen.Acquisition.Execute(experiment)
    retstring = ZenLiveScan.GetCurrentError()
    if retstring == 'Successful':
        print('Experiment Completed: {}'.format(experiment.Name()))
</Text>
  <Author></Author>
  <Description></Description>
  <Keywords></Keywords>
  <Row>47</Row>
  <Column>35</Column>
</Script>